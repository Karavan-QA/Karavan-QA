	Архитектура «клиент-сервис» является основным принципам работы Интернета. Будь то любой веб-сайт или мобильное приложение 
в Интернете — они работают на сервере, а их пользователя являются клиентами.

На клиент-сервисной архитектуре построены все сайты и интернет-серверы.
В клиент-сервисной архитектуре используется три компонента: 
Клиент — программа, которую мы используем в интернете, для удобного способа взаимодействия с сервером. (Браузер или отдельная программа);
Сервер — компьютер, на котором хранится сайт или приложение. Основная задача — бесперебойная работа и возможность обрабатывать миллионы
запросов от пользователей. (Т.е. заходя на сайт магазина, мы обращаемся к серверу, на котором находится сайт);
База данных — программа, в которой хранятся все данные приложения или сайт. (Например для магазина это будет база клиентов, товаров и 
заказов).

Клиенты запрашивают информацию у сервера. Если сервер считает, что у клиента есть права на получение информации, то он ее предоставляет. 

Преимущества и недостатки архитектуры «клиент-сервер»

К преимуществам относится:

Централизованность — все данные и управление сосредоточены в центральном сервере;
Информационная безопасность — ресурсы общего пользования администрируются централизованно;
Производительность — использование выделенного сервера повышает скорость работы ресурсов общего пользования;
Масштабируемость — количество клиентов и серверов можно увеличивать независимо друг от друга.

К недостаткам можно отнести:

Перегрузка трафика в сети — это является главной проблемой в сетях «клиент-сервер»;
Наличие единой точки отказа в небольших сетях с одним сервером — если от отказывает, все клиенты остаются без обслуживания;
Превышение пределов ресурсов сервера — когда новые клиенты, при запросе услуги, остаются без обслуживания.

Типы клиент-сервисной архитектуры.

Одноуровневая архитектура (1-Tier).

Это архитектура, где все прикладные программы рассредоточены по рабочим станциям, которые обращаются к общему серверу баз данных 
или к общему файловому серверу. Сервер только предоставляет данные. 
Эта архитектура очень надёжна, но ей сложно управлять, т. к. в каждой рабочей станции данные будут присутствовать в разных вариантах.

Двухуровневая архитектура (2-Tier).

В этой архитектуре прикладные программы сосредоточены на сервере приложений, а в рабочих станциях находятся программы-клиенты, 
которые предоставляют для пользователей интерфейс для работы с приложениями на общем сервере. 
Её преимущества: легко конфигурировать и модифицировать приложения, пользователю легче работать в такой среде, хорошая производительность
и масштабируемость.  
Ограничения: при увеличении числа пользователей производительность может падать; проблемы с безопасностью, т.к все данные и программы 
находятся на центральном сервере; все клиенты зависимы от базы данных одного производителя.

Трёхуровневая архитектура (3-Tier).

В данной архитектуре сервер баз данных, файловый сервер и другие представляют собой отдельный уровень, результаты работы которого 
использует сервер приложений. Все обращения клиентов к БД происходят через промежуточное программное обеспечение (middleware), 
которое находится на сервере приложений. Благодаря этому повышается гибкость работы и производительность. 
Преимущества: целостность данных; безопасность выше по сравнению с двухуровневой архитектурой; база данных защищена от несанкционированного
проникновения. 
Ограничения: между клиентом и сервером более сложная структура коммуникаций, поскольку в нём также находится middleware. 

Многоуровневая архитектура (N-Tier).

Несколько серверов приложений используют результаты работы друг друга, а также данные от различных серверов баз данных, файловых серверов
и других видов серверов. 
Преимущества: гибкость предоставления услуг.
Недостаток: сложность, многокомпонентность такой архитектуры.
