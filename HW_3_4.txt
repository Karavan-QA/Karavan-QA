1. Запускаем оболочку bash - вводим в строку файла #!/bin/bash
Первая опция в задании написана #/!bin/bash - эта опция работать не будет.

2. Объявляется переменная options=(	'1' "2" '3' '4' '5' )
В Bash нет системы типов, все переменные являются строками. 
Поэтому какие ставить ковычки (одинарные или двойные) не принципиально.

3. echo 'Please choose an option'
Команда echo выводит текст в консоль - Please choose an option

4. select input in "${options[@]}" 
Извлекает информацию из ввода и назначает её переменной.
Конструкция select создает меню из списка элементов. 
Он имеет почти тот же синтаксис, что и цикл for.

5. do - команда, указывает что нужно делать после нее

6. case "$input" in 
Каждый оператор начинается с ключевого слова case, за которым следует выражение в ковычках и ключевое слово in. 

7. "${options[0]}")
			ls
			;;
При вводе переменной '0' выводит на экран содержание текущего каталога.
Можно использовать несколько шаблонов, разделенных | оператор. Оператор ) завершает список шаблонов.

8. "${options[1]}")
			date $'+Time: %T\nDate: %D'
			;;
При вводе переменной '1' на экран выводится 'Time: (время в формате HH:MM:SS)' на второй строке 'Date: (дата в формате MM/DD/YY [11-01-21])'
date $'+Time: %T\nDate: %D'

9. "${options[2]}") - При вводе переменной '2' на экран выводится:
       a) read -p 'What file do you wish to check? ' finput 
        приглашение 'What file do you wish to check? ' для пользовательского ввода и сохраняет ввод в переменную $finput;
    
       b) if [[ -d $finput ]]; then   
				format='%s is a directory.\n'
        если введеная переменная $finput является директорией, то интерпретирует аргумент в строку и помещает ее в выходные данные команды.
        На вывод '(значение переменной $finput) "is a directory."'
        
       c) elif [[ -f $finput ]]; then
				format='%s is a file.\n'
        если введеная переменная $finput является файлом, то интерпретирует аргумент в строку и помещает ее в выходные данные команды. 
        На вывод '(значение переменной $finput) "is a file."'

        d) else
				format='%s does not exist.\n'
        если не директория и не файл, интерпретирует аргумент в строку и помещает ее в выходные данные команды. 
        На вывод '(значение переменной $finput) "does not exist."'

        e) fi
			printf "$format" "$finput"
			;;
        вывод на экран значения переменной $format и на новой строке $finput

10. "${options[3]}") 
			read -p 'Please enter filename: ' binput
			cp "$binput"{,.bak}
			;;
    При вводе переменной '3' на экран выводится приглашение 'Please enter filename: ' для пользовательского ввода и сохраняет ввод в переменную $binput
    Создаётся копия переменной $binput в формате .bak

11. "${options[4]}")
			break
			;;
    При вводе переменной '4' окончание условия if.
    Цикл select будет продолжать работать и запрашивать ввод данных пользователем, пока не будет выполнена команда break.

12. *)
			echo 'Not a valid option.'
			;; 
    Использование подстановочного знака звездочки ( * ) в качестве последнего шаблона для определения регистра по умолчанию.
    "Not a valid option." - выво на экран, если введена опция, несуществующая в меню.

13. esac 
    Заявление заканчивается словом esac.
    
14. done
    Завершение выполнения команд в цикле.